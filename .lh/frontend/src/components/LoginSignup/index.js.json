{
    "sourceFile": "frontend/src/components/LoginSignup/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753424582912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753424582912,
            "name": "Commit-0",
            "content": "'use client';\nimport UserForm from './UserForm';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { FORGOT_PASSWORD, SIGNIN, SIGNUP } from './constant';\nimport { getAccessToken } from '@/services/storageUtils';\nimport { isEmpty } from '@/lib/utils';\nimport { usePathname, useSearchParams } from 'next/navigation';\nimport CustomToast from '@/common/components/custom-toaster';\nimport useSignup from './hooks/useSignup';\nimport useGeoLocation from '@/common/hook/useGeoLocation';\n// import { jungle } from '@/assets/png';\n// import { mobileiImage } from '@/assets/png';\n\nconst LoginSignup = () => {\n  const router = useRouter();\n  const isToken = getAccessToken();\n\n  const searchParams = useSearchParams();\n  const pathname = usePathname();\n  const newPasswordKey = searchParams.get('newPasswordKey');\n\n  const [open, setOpen] = useState(isEmpty(isToken));\n  const [isForgotPassword, setIsForgotPassword] = useState(false);\n  const [toastState, setToastState] = useState({\n    showToast: false,\n    message: '',\n    status: '',\n  });\n\n  const { showToast, message, status } = toastState;\n\n  const { signupData, signupLoading } = useSignup();\n  const location = useGeoLocation();\n\n  useEffect(() => {\n    if (isEmpty(getAccessToken())) {\n      setOpen(true);\n    }\n  }, [router]);\n\n  useEffect(() => {\n    if (location.loaded && !location.error) {\n      console.log('User geolocation:', location.coordinates);\n    }\n  }, [location]);\n\n  if (pathname === '/reset-password' && newPasswordKey) {\n    return null;\n  }\n\n  return (\n    <>\n      <Dialog\n        open={open}\n        onOpenChange={(isOpen) =>\n          isOpen && !isEmpty(getAccessToken()) && setOpen(isOpen)\n        }\n        modal\n        className=\"w-full\"\n      >\n        <DialogContent\n          onPointerDownOutside={(e) => e.preventDefault()}\n          className=\"p-2 border-radius-0 gap-0 w-full sm:w-[800px] max-w-[98%] flex border-none\"\n        >\n          <DialogTitle />\n          <DialogHeader className=\"w-full\">\n            <div className=\"flex w-full h-full flex-col sm:flex-row\">\n\n              {/* âœ… Mobilei Banner Image (only shown on mobilei) */}\n              {/* <div className=\"w-full h-[200px] mb-4 sm:hidden flex justify-center items-center\">\n  <img\n    // src={jungle.src}\n    alt=\"Mobile Banner\"\n    className=\"w-full h-full object-cover\"\n  />\n</div> */}\n\n              {/* Left Side: Tabs for Sign Up / Sign In */}\n              <Tabs defaultValue=\"signIn\" className=\"w-full sm:w-1/2 p-2 flex flex-col\">\n                <TabsList className=\"bg-dark-blue w-full text-gray-400\">\n                  <TabsTrigger\n                    className=\"w-1/2 py-2 text-center font-semibold focus:outline-none aria-selected:text-white aria-selected:text-[22px] aria-selected:border-b-2 aria-selected:border-green-500\"\n                    value=\"signUp\"\n                    style={{ color: '#fff' }}\n                    onClick={() => setIsForgotPassword(false)}\n                  >\n                    Sign Up\n                  </TabsTrigger>\n                  <TabsTrigger\n                    className=\"w-1/2 py-2 text-center font-semibold focus:outline-none aria-selected:text-white aria-selected:text-[22px] aria-selected:border-b-2 aria-selected:border-green-500\"\n                    value=\"signIn\"\n                    style={{ color: '#fff' }}\n                    onClick={() => setIsForgotPassword(false)}\n                  >\n                    Sign In\n                  </TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"signUp\" className=\"flex-grow p-4\">\n                  <div className=\"h-full flex flex-col\">\n                    <UserForm\n                      controls={SIGNUP}\n                      isSignUp={true}\n                      setOpen={setOpen}\n                      setToastState={setToastState}\n                    />\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"signIn\" className=\"flex-grow p-4\">\n                  <div className=\"h-full flex flex-col\">\n                    {isForgotPassword ? (\n                      <>\n                        <p className=\"text-[rgb(var(--lb-blue-250))] text-[14px] mb-2\">\n                          Please enter your email. We will send you a reset link for new password.\n                        </p>\n                        <UserForm\n                          controls={FORGOT_PASSWORD}\n                          setOpen={setOpen}\n                          setIsForgotPassword={setIsForgotPassword}\n                          isForgotPassword={isForgotPassword}\n                          setToastState={setToastState}\n                        />\n                      </>\n                    ) : (\n                      <UserForm\n                        controls={SIGNIN}\n                        setOpen={setOpen}\n                        setIsForgotPassword={setIsForgotPassword}\n                        setToastState={setToastState}\n                      />\n                    )}\n                  </div>\n                </TabsContent>\n              </Tabs>\n\n              {/* Right Side: Desktop Banner Image (shown only on desktop) */}\n              <div className=\"w-1/2 relative justify-center items-center max-[899px]:hidden sm:flex\">\n                {signupLoading ? (\n                  <p className=\"text-white text-center\">Loading banner...</p>\n                ) : signupData?.length > 0 ? (\n                  signupData.map((banner, index) => (\n                    <a\n                      key={index}\n                      href={banner?.imageUrl || '#'}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"w-full\"\n                    >\n                      <img\n                        src={banner?.imageUrl || 'https://luckybird.io/img/back.47e88397.png'}\n                        alt={`banner-${index}`}\n                        className=\"h-[434px] w-full max-h-[434px] object-cover object-right\"\n                      />\n                    </a>\n                  ))\n                ) : (\n                  <img\n                    src=\"https://luckybird.io/img/back.47e88397.png\"\n                    alt=\"default banner\"\n                    className=\"h-auto w-full max-h-[434px] object-cover\"\n                  />\n                )}\n              </div>\n            </div>\n          </DialogHeader>\n        </DialogContent>\n      </Dialog>\n\n      {/* Toast Notification */}\n      <CustomToast\n        showToast={showToast}\n        setShowToast={(val) =>\n          setToastState((prev) => ({ ...prev, showToast: val }))\n        }\n        message={message}\n        status={status}\n        duration={2000}\n      />\n    </>\n  );\n};\n\nexport default LoginSignup;\n"
        }
    ]
}